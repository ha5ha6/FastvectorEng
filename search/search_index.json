{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastVector This is a simple vector python package.","title":"Start"},{"location":"#fastvector","text":"This is a simple vector python package.","title":"FastVector"},{"location":"api/","text":"References Vector Class Own implementation of a 2D vector class. Vector2D Vector2D class to perform simple vector operations. Source code in fastvector/vector.py class Vector2D : '''Vector2D class to perform simple vector operations. ''' def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' ) def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )' def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )' def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 ) def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' ) @staticmethod def check_vector_types ( vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' ) __abs__ ( self ) special Return the length (magnitude) of the vector instance. Returns: Type Description float Length of the vector instance. Source code in fastvector/vector.py def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 ) __add__ ( self , other_vector ) special Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Type Description Vector2D The additon vector of the self and the other vector instance. Source code in fastvector/vector.py def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) __bool__ ( self ) special Return the truth value of the vector instance. Returns: Type Description bool True, if the vector is not the Null-vector. False, else. Source code in fastvector/vector.py def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) __call__ ( self ) special Callable for the vector instance representation. Returns: Type Description str The representation of the vector instance. Source code in fastvector/vector.py def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () __eq__ ( self , other_vector ) special Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector object Other vector instance (right-hand-side of the operator) required Returns: Type Description bool True, if the both vector instances have the same values. False, else. Source code in fastvector/vector.py def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal __ge__ ( self , other , NotImplemented = NotImplemented ) special Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector/vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result __gt__ ( self , other , NotImplemented = NotImplemented ) special Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector/vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result and self != other __init__ ( self , x = 0 , y = 0 ) special Create a vector instance with the given x and y values. Parameters: Name Type Description Default x SupportsFloat x-Value. Defaults to 0. 0 y SupportsFloat y-Value. Defaults to 0. 0 Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' ) __le__ ( self , other , NotImplemented = NotImplemented ) special Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector/vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = self . __lt__ ( other ) return op_result or self == other __lt__ ( self , other_vector ) special Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Type Description bool True, if the self instance is less than the other vector instance. False, else. Source code in fastvector/vector.py def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than __mul__ ( self , other ) special Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union[SupportsFloat, Vector2D] Other vector instance or scaler value (right-hand-side of the operator) required Exceptions: Type Description TypeError Not int/float passed in. Returns: Type Description Union[SupportsFloat, Vector2D] The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) __repr__ ( self ) special Return the vector instance representation. Returns: Type Description str The representation of the vector instance. Source code in fastvector/vector.py def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )' __str__ ( self ) special The vector instance as a string. Returns: Type Description str The vector instance as a string. Source code in fastvector/vector.py def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )' __sub__ ( self , other_vector ) special Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Type Description Vector2D The subtraction vector of the self and the other vector instance. Source code in fastvector/vector.py def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) __truediv__ ( self , other ) special Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other SupportsFloat Other vector instance or scaler value (right-hand-side of the operator). required Exceptions: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description SupportsFloat The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' ) check_vector_types ( vector ) staticmethod Check if the vector is an instance of the Vector2D class. Parameters: Name Type Description Default vector object A vector instance. required Exceptions: Type Description TypeError If vector is not an instance of the Vector2D class. Source code in fastvector/vector.py @staticmethod def check_vector_types ( vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"API"},{"location":"api/#references","text":"","title":"References"},{"location":"api/#vector-class","text":"Own implementation of a 2D vector class.","title":"Vector Class"},{"location":"api/#fastvector.vector.Vector2D","text":"Vector2D class to perform simple vector operations. Source code in fastvector/vector.py class Vector2D : '''Vector2D class to perform simple vector operations. ''' def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' ) def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )' def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )' def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 ) def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' ) @staticmethod def check_vector_types ( vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"Vector2D"},{"location":"api/#fastvector.vector.Vector2D.__abs__","text":"Return the length (magnitude) of the vector instance. Returns: Type Description float Length of the vector instance. Source code in fastvector/vector.py def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' return sqrt ( self . x ** 2.0 + self . y ** 2.0 )","title":"__abs__()"},{"location":"api/#fastvector.vector.Vector2D.__add__","text":"Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Type Description Vector2D The additon vector of the self and the other vector instance. Source code in fastvector/vector.py def __add__ ( self , other_vector : Vector2D ) -> Vector2D : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y )","title":"__add__()"},{"location":"api/#fastvector.vector.Vector2D.__bool__","text":"Return the truth value of the vector instance. Returns: Type Description bool True, if the vector is not the Null-vector. False, else. Source code in fastvector/vector.py def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self ))","title":"__bool__()"},{"location":"api/#fastvector.vector.Vector2D.__call__","text":"Callable for the vector instance representation. Returns: Type Description str The representation of the vector instance. Source code in fastvector/vector.py def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ ()","title":"__call__()"},{"location":"api/#fastvector.vector.Vector2D.__eq__","text":"Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector object Other vector instance (right-hand-side of the operator) required Returns: Type Description bool True, if the both vector instances have the same values. False, else. Source code in fastvector/vector.py def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' is_equal = False if isinstance ( other_vector , Vector2D ): if self . x == other_vector . x and self . y == other_vector . y : is_equal = True return is_equal","title":"__eq__()"},{"location":"api/#fastvector.vector.Vector2D.__ge__","text":"Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector/vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result","title":"__ge__()"},{"location":"api/#fastvector.vector.Vector2D.__gt__","text":"Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector/vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result and self != other","title":"__gt__()"},{"location":"api/#fastvector.vector.Vector2D.__init__","text":"Create a vector instance with the given x and y values. Parameters: Name Type Description Default x SupportsFloat x-Value. Defaults to 0. 0 y SupportsFloat y-Value. Defaults to 0. 0 Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py def __init__ ( self , x : SupportsFloat = 0 , y : SupportsFloat = 0 ) -> None : '''Create a vector instance with the given x and y values. Args: x (SupportsFloat, optional): x-Value. Defaults to 0. y (SupportsFloat, optional): y-Value. Defaults to 0. Raises: TypeError: If x or y are not a number. ''' if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float values for x and y!' )","title":"__init__()"},{"location":"api/#fastvector.vector.Vector2D.__le__","text":"Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector/vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = self . __lt__ ( other ) return op_result or self == other","title":"__le__()"},{"location":"api/#fastvector.vector.Vector2D.__lt__","text":"Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Type Description bool True, if the self instance is less than the other vector instance. False, else. Source code in fastvector/vector.py def __lt__ ( self , other_vector : Vector2D ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than","title":"__lt__()"},{"location":"api/#fastvector.vector.Vector2D.__mul__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union[SupportsFloat, Vector2D] Other vector instance or scaler value (right-hand-side of the operator) required Exceptions: Type Description TypeError Not int/float passed in. Returns: Type Description Union[SupportsFloat, Vector2D] The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py def __mul__ ( self , other : Union [ SupportsFloat , Vector2D ]) -> Union [ SupportsFloat , Vector2D ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[SupportsFloat, Vector2D]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[SupportsFloat, Vector2D]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , Vector2D ): return self . x * other . x + self . y * other . y elif isinstance ( other , numbers . Real ): return Vector2D ( self . x * other , self . y * other ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' )","title":"__mul__()"},{"location":"api/#fastvector.vector.Vector2D.__repr__","text":"Return the vector instance representation. Returns: Type Description str The representation of the vector instance. Source code in fastvector/vector.py def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.Vector2D( { self . x } , { self . y } )'","title":"__repr__()"},{"location":"api/#fastvector.vector.Vector2D.__str__","text":"The vector instance as a string. Returns: Type Description str The vector instance as a string. Source code in fastvector/vector.py def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . x } , { self . y } )'","title":"__str__()"},{"location":"api/#fastvector.vector.Vector2D.__sub__","text":"Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector Vector2D Other vector instance (right-hand-side of the operator). required Returns: Type Description Vector2D The subtraction vector of the self and the other vector instance. Source code in fastvector/vector.py def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (Vector2D): Other vector instance (right-hand-side of the operator). Returns: Vector2D: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y )","title":"__sub__()"},{"location":"api/#fastvector.vector.Vector2D.__truediv__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other SupportsFloat Other vector instance or scaler value (right-hand-side of the operator). required Exceptions: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description SupportsFloat The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector/vector.py def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: SupportsFloat: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : return Vector2D ( self . x / other , self . y / other ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' )","title":"__truediv__()"},{"location":"api/#fastvector.vector.Vector2D.check_vector_types","text":"Check if the vector is an instance of the Vector2D class. Parameters: Name Type Description Default vector object A vector instance. required Exceptions: Type Description TypeError If vector is not an instance of the Vector2D class. Source code in fastvector/vector.py @staticmethod def check_vector_types ( vector : object ) -> None : '''Check if the vector is an instance of the Vector2D class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the Vector2D class. ''' if not isinstance ( vector , Vector2D ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"check_vector_types()"}]}